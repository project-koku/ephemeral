#!/usr/bin/env bash

PROJECT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Settings
source ${PROJECT_DIR}/settings

# Logging
source ${PROJECT_DIR}/logging

# path to clowder config template file
TEMPLATE_FILE=${PROJECT_DIR}/config_yaml.template

CMD=$1

usage() {
    log-info "Usage: `basename $0` <command> [command_arg]"
    log-info ""
    log-info "commands:"
    log-info "\t build-image            build image from local repo and update config.yml file"
    log-info "\t deploy-image           deploy image to previously reserved ephemeral namspace"
    log-info "\t help                   show usage"
    log-info "\t list                   list ephemeral namespace"
    log-info "\t login                  login into ephemeral cluster"
    log-info "\t pods                   list all pods in your namespace"
    log-info "\t port-forward-koku      forward local port<4000> to Koko svc"
    log-info "\t port-forward-masu      forward local port<5042> to Masu svc"
    log-info "\t port-forward-sources  forward local port<3000> to Sources svc"
    log-info "\t port-forward-ingress  forward local port<8000> to Ingress svc"
    log-info "\t release                release currently reserved(default), or specify the namespace to release"
    log-info "\t reserve <hours>        reserve an ephemeral namespace for specified time (example: 48h)"
}

help() {
    usage
}

check_vars() {
    var_names=("$@")
    for var_name in "${var_names[@]}"; do
        if [ -z "${!var_name}" ];then
          log-err "$var_name is not set"
          exit 1
        fi
    done
}

check-token() {
    if [[ -s "$TOKEN_FILE" ]]; then
        export EPH_TOKEN=$(cat $TOKEN_FILE)
    else
        log-err "Before using these commands you must setup you ephemeral token file"
        log-info "you can add the token to your .eph_token file like this"
        log-info "\t echo [TOKEN] > ~/.eph_token"
    fi
}

get-namespace() {
    check-token
    export NAMESPACE=$(bonfire namespace list |grep ddonahue007 |awk '{print $1}')
    oc project ${NAMESPACE}
    log-info "NAMESPACE=${NAMESPACE}"
}

login() {
    check-token
    local _server=https://api.c-rh-c-eph.8p0c.p1.openshiftapps.com:6443

    log-info "oc login --token xxxxxx --server ${_server}"
    oc login --token=${EPH_TOKEN} --server=${_server}
    get-namespace
    oc project ${NAMESPACE}
}

update-config-file() {
    _ref=$(git rev-parse head)
    _image_tag=$(git rev-parse --short=7 head)

    log-info "Updated: $CONFIG_FILE"
    log-info "\thost: $HOST"
    log-info "\trepo: $KOKU_HOME"
    log-info "\tref: $_ref"
    log-info "\tIMAGE: $QUAY_REPO"
    log-info "\tIMAGE_TAG: $_image_tag"
    log-info "\tDBM_IMAGE: $QUAY_REPO"
    log-info "\tDBM_IMAGE_TAG: $_image_tag"
    log-info "\tHIVE_IMAGE_TAG: $HIVE_IMAGE_TAG"

    sed \
       -e s#%AWS_ACCESS_KEY_ID_EPH%#$AWS_ACCESS_KEY_ID_EPH# \
       -e s#%AWS_SECRET_ACCESS_KEY_EPH%#$AWS_SECRET_ACCESS_KEY_EPH# \
       -e s#%HOST%#$HOST# \
       -e s#%REPO%#$KOKU_HOME# \
       -e s#%REF%#$_ref# \
       -e s#%IMAGE%#$QUAY_REPO# \
       -e s#%IMAGE_TAG%#$_image_tag# \
       -e s#%DBM_IMAGE%#$QUAY_REPO# \
       -e s#%DBM_IMAGE_TAG%#$_image_tag#  \
       -e s#%HIVE_IMAGE_TAG%#$HIVE_IMAGE_TAG#  $TEMPLATE_FILE > $CONFIG_FILE
}

reserve() {
    local _duration=${1:-24h}

    log-info "reserving..."
    log-info "bonfire namespace reserve -d ${_duration}"
    bonfire namespace reserve -d "${_duration}"
    get-namespace
}

release() {
    get-namespace
    log-info "releasing..."
    log-info "bonfire namespace release $NAMESPACE"
    bonfire namespace release $NAMESPACE
}

list() {
    log-info "bonfire namespace list"
    bonfire namespace list
}

pods() {
    log-info "oc get pods"
    oc get pods
}

build-image() {
    local _version=$(git rev-parse --short=7 HEAD)

    log-info "$CONTAINER_EXEC build . -t  ${QUAY_REPO}:${_version}"
    $CONTAINER_EXEC build . -t  ${QUAY_REPO}:${_version}
    $CONTAINER_EXEC tag  ${QUAY_REPO}:${_version}  ${QUAY_REPO}:latest

    log-info "$CONTAINER_EXEC push  ${QUAY_REPO}:${_version}"
    $CONTAINER_EXEC push  ${QUAY_REPO}:${_version}
    $CONTAINER_EXEC push  ${QUAY_REPO}:latest

    update-config-file
}

deploy-image() {
    get-namespace

    _version=$(git rev-parse --short=7 HEAD)

    log-info "deploying  ${QUAY_REPO}:${_version} to ${NAMESPACE}"
    log-info "bonfire process hccm --source=appsre --local-config-path dev/config.yaml --no-remove-resources \
    koku --no-remove-resources presto --no-remove-resources hive-metastore --set-parameter rbac/MIN_REPLICAS=1 \
    --namespace ${NAMESPACE} | oc apply -f - -n ${NAMESPACE}"
    bonfire process hccm \
  --source=appsre \
  --local-config-path dev/config.yaml \
  --no-remove-resources koku \
  --no-remove-resources presto \
  --no-remove-resources hive-metastore \
  --set-parameter rbac/MIN_REPLICAS=1 \
  --namespace ${NAMESPACE} | oc apply -f - -n ${NAMESPACE}
}

port-forward() {
  local _service_name=${1}
  local _local_port=${2}
  local _service_port=${3}

  log-info "oc port-forward service/${_service_name} ${_local_port}:${_service_port}"
    oc port-forward service/${_service_name} ${_local_port}:${_service_port}
}

port-forward-sources() {
  port-forward sources-api-svc $SOURCES_FWD_PORT 8000
}

port-forward-koku() {
  port-forward koku-clowder-api $KOKU_FWD_PORT 8000
}

port-forward-masu() {
  port-forward koku-clowder-masu $MASU_FWD_PORT 10000
}

port-forward-ingress() {
  port-forward ingress-service $INGRESS_FWD_PORT 8000
}

#
# execute
#
check_vars KOKU_HOME QUAY_REPO AWS_ACCESS_KEY_ID_EPH AWS_SECRET_ACCESS_KEY_EPH
check-token

case ${CMD} in
   "build-image") build-image;;
   "deploy-image") deploy-image;;
   "help") usage;;
   "list") list;;
   "login")login;;
   "pods")pods;;
   "port-forward-koku") port-forward-koku;;
   "port-forward-masu") port-forward-masu;;
   "port-forward-sources") port-forward-sources;;
   "port-forward-ingress") port-forward-ingress;;
   "release") release $2;;
   "reserve") reserve $2;;
   *) usage;;
esac
